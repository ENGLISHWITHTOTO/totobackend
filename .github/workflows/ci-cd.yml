name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "16"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_english_with_toto
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

      - name: Type check with mypy
        run: |
          mypy . --ignore-missing-imports

      - name: Security check with bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Run tests
        env:
          SECRET_KEY: test-secret-key
          DEBUG: True
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_english_with_toto
          REDIS_URL: redis://localhost:6379/0
        run: |
          python manage.py test --verbosity=2

      - name: Generate coverage report
        run: |
          coverage run --source='.' manage.py test
          coverage report --fail-under=80
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker Hub login commented out - requires credentials
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: english-with-toto/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (local only)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: english-with-toto/backend:local
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy stages commented out - requires server setup
  # deploy-staging:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/develop'
  #   environment: staging

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Deploy to staging
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         host: ${{ secrets.STAGING_HOST }}
  #         username: ${{ secrets.STAGING_USERNAME }}
  #         key: ${{ secrets.STAGING_SSH_KEY }}
  #         script: |
  #           cd /opt/english-with-toto
  #           git pull origin develop
  #           docker-compose -f docker-compose.staging.yml pull
  #           docker-compose -f docker-compose.staging.yml up -d
  #           docker-compose -f docker-compose.staging.yml exec web python manage.py migrate
  #           docker-compose -f docker-compose.staging.yml exec web python manage.py collectstatic --noinput

  # deploy-production:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   environment: production

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Deploy to production
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         host: ${{ secrets.PRODUCTION_HOST }}
  #         username: ${{ secrets.PRODUCTION_USERNAME }}
  #         key: ${{ secrets.PRODUCTION_SSH_KEY }}
  #         script: |
  #           cd /opt/english-with-toto
  #           git pull origin main
  #           docker-compose -f docker-compose.production.yml pull
  #           docker-compose -f docker-compose.production.yml up -d
  #           docker-compose -f docker-compose.production.yml exec web python manage.py migrate
  #           docker-compose -f docker-compose.production.yml exec web python manage.py collectstatic --noinput

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  performance-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run performance tests
        run: |
          locust -f tests/performance/locustfile.py --headless -u 100 -r 10 -t 60s --html performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html
